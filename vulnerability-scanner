#!/bin/bash

# Provide target
if [ -z "$1" ]; then
    echo "Usage: $0 <target-ip>"
    exit 1
fi

TARGET=$1

# Initial scan to detect open ports
echo "[*] Running initial scan to detect open ports..."
nmap -p- --min-rate=1000 -T4 $TARGET -oG open_ports.txt

# Display the raw Nmap output 
echo "[*] Debug: Raw Nmap output (open_ports.txt):"
cat open_ports.txt

# Extract open ports from the Nmap output file 
open_ports=$(grep -oP '(\d+)/open/tcp' open_ports.txt | cut -d '/' -f 1 | tr '\n' ',' | sed 's/,$//')

# Show extracted ports
echo "[*] Debug: Extracted open ports: $open_ports"

# Check if open_ports is empty or malformed
if [ -z "$open_ports" ]; then
    echo "No open ports found. Exiting..."
    exit 1
fi

# Port formatting for Nmap (only numbers and commas)
if [[ ! "$open_ports" =~ ^[0-9,]+$ ]]; then
    echo "Error: Invalid port format detected. Exiting..."
    exit 1
fi

echo "[*] Open ports found: $open_ports"

# Run Nmap vulnerability scan on open ports
echo "[*] Running Nmap vulnerability scan on open ports..."
nmap -sV --script=sshv1,ssh-auth-methods,ssh2-enum-algos,ssh-hostkey,vuln,vulners -p$open_ports $TARGET -oN nmap_vuln_results.txt

echo "[*] Vulnerability scan completed. Check nmap_vuln_results.txt for details."

# Default credentials check
echo "[*] Checking for default credentials..."
if [[ "$open_ports" == *"22"* ]]; then
    echo "[*] Checking SSH default credentials..."
    sshpass -p "toor" ssh -o StrictHostKeyChecking=no root@$TARGET "echo 'SSH access with default root password!'" 2>/dev/null
fi

if [[ "$open_ports" == *"21"* ]]; then
    echo "[*] Checking FTP default credentials..."
    response=$(echo -e "USER anonymous\r\nPASS anonymous@\r\n" | nc -w 3 $TARGET 21)
    if echo "$response" | grep -q "230"; then
        echo "Anonymous FTP login allowed on $TARGET"
    else
        echo "Anonymous FTP login NOT allowed on $TARGET"
    fi
fi

if [[ "$open_ports" == *"3306"* ]]; then
    echo "[*] Checking MySQL default credentials..."
    mysql -h $TARGET -u root -p'root' -e "SHOW DATABASES;" 2>/dev/null && echo "Default MySQL credentials found!"
fi

echo "[*] Default credential checks completed."

# Extract Service Versions and Query CVE Database
echo "[*] Extracting service versions..."
services=$(nmap -sV -p$open_ports $TARGET | grep -E "^[0-9]+/tcp" | awk '{$1=""; print $0}' | sed 's/^ //')

echo "[*] Checking for known vulnerabilities..."
echo "$services" | while read -r line; do
    port=$(echo "$line" | awk '{print $1}')
    software=$(echo "$line" | awk '{print $2}')
    version=$(echo "$line" | awk '{print $3}')

    if [ -n "$software" ] && [ -n "$version" ]; then
        echo "Searching CVEs for $software $version on port $port..."

        # Query the NVD API
        cve_results=$(curl -s "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=$software%20$version")

        # Check if response is valid JSON
        if echo "$cve_results" | jq empty 2>/dev/null; then
            # Extract CVE IDs and descriptions
            count=$(echo "$cve_results" | jq '.vulnerabilities | length')
            if [ "$count" -gt 0 ]; then
                echo "Vulnerabilities found for $software $version:"
                echo "$cve_results" | jq -r '.vulnerabilities[] | "CVE: \(.cve.id) - \(.cve.descriptions[0].value)"'
            else
                echo "No CVEs found for $software $version."
            fi
        else
            echo "Error: API returned invalid data."
        fi
    fi
done

echo "[*] Scan completed."

